const passport = require('passport');
require('dotenv').config()
const GoogleStrategy = require('passport-google-oauth20').Strategy;


    if (!process.env.CLIENT_ID) {
    console.error('‚ùå ERRO: GOOGLE_CLIENT_ID n√£o encontrado no .env');
    console.log('üí° Adicione no arquivo .env: GOOGLE_CLIENT_ID=seu_client_id_aqui');
    }

    if (!process.env.GOOGLE_CLIENT_SECRET) {
    console.error('‚ùå ERRO: GOOGLE_CLIENT_SECRET n√£o encontrado no .env');
    console.log('üí° Adicione no arquivo .env: GOOGLE_CLIENT_SECRET=seu_client_secret_aqui');
    }

    // Configurar estrat√©gia do Google
    passport.use('google', new GoogleStrategy({
        clientID: process.env.CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        callbackURL: "/auth/google/callback",
        scope: ['profile', 'email']
    },
    async function(accessToken, refreshToken, profile, done) {
        try {
        console.log('‚úÖ Usu√°rio autenticado pelo Google:', profile.displayName);
        console.log('üìß Email:', profile.emails[0].value);
        
        // Criar objeto do usu√°rio
        const user = {
            googleId: profile.id,
            name: profile.displayName,
            email: profile.emails[0].value,
            avatar: profile.photos && profile.photos[0] ? profile.photos[0].value : null,
            provider: 'google'
        };

        return done(null, user);
        } catch (error) {
        console.error('‚ùå Erro na estrat√©gia Google:', error);
        return done(error, null);
        }
    }
    ));

    // Serializa√ß√£o do usu√°rio (para sess√£o)
    passport.serializeUser(function(user, done) {
    console.log('üîí Serializando usu√°rio:', user.email);
    done(null, user);
    });

    // Deserializa√ß√£o do usu√°rio (da sess√£o)
    passport.deserializeUser(function(user, done) {
    console.log('üîì Deserializando usu√°rio:', user.email);
    done(null, user);
    });

    console.log('‚úÖ Passport configurado com sucesso!');

    module.exports = passport;
